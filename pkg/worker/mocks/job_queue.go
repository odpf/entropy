// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	worker "github.com/odpf/entropy/pkg/worker"
	mock "github.com/stretchr/testify/mock"
)

// JobQueue is an autogenerated mock type for the JobQueue type
type JobQueue struct {
	mock.Mock
}

type JobQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *JobQueue) EXPECT() *JobQueue_Expecter {
	return &JobQueue_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function with given fields: ctx, kinds, fn
func (_m *JobQueue) Dequeue(ctx context.Context, kinds []string, fn worker.JobFn) error {
	ret := _m.Called(ctx, kinds, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, worker.JobFn) error); ok {
		r0 = rf(ctx, kinds, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobQueue_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type JobQueue_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//  - ctx context.Context
//  - kinds []string
//  - fn worker.JobFn
func (_e *JobQueue_Expecter) Dequeue(ctx interface{}, kinds interface{}, fn interface{}) *JobQueue_Dequeue_Call {
	return &JobQueue_Dequeue_Call{Call: _e.mock.On("Dequeue", ctx, kinds, fn)}
}

func (_c *JobQueue_Dequeue_Call) Run(run func(ctx context.Context, kinds []string, fn worker.JobFn)) *JobQueue_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(worker.JobFn))
	})
	return _c
}

func (_c *JobQueue_Dequeue_Call) Return(_a0 error) *JobQueue_Dequeue_Call {
	_c.Call.Return(_a0)
	return _c
}

// Enqueue provides a mock function with given fields: ctx, jobs
func (_m *JobQueue) Enqueue(ctx context.Context, jobs ...worker.Job) error {
	_va := make([]interface{}, len(jobs))
	for _i := range jobs {
		_va[_i] = jobs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...worker.Job) error); ok {
		r0 = rf(ctx, jobs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type JobQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//  - ctx context.Context
//  - jobs ...worker.Job
func (_e *JobQueue_Expecter) Enqueue(ctx interface{}, jobs ...interface{}) *JobQueue_Enqueue_Call {
	return &JobQueue_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx}, jobs...)...)}
}

func (_c *JobQueue_Enqueue_Call) Run(run func(ctx context.Context, jobs ...worker.Job)) *JobQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]worker.Job, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(worker.Job)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *JobQueue_Enqueue_Call) Return(_a0 error) *JobQueue_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}
