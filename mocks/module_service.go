// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/odpf/entropy/domain"
	mock "github.com/stretchr/testify/mock"
)

// ModuleService is an autogenerated mock type for the ServiceInterface type
type ModuleService struct {
	mock.Mock
}

type ModuleService_Expecter struct {
	mock *mock.Mock
}

func (_m *ModuleService) EXPECT() *ModuleService_Expecter {
	return &ModuleService_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: ctx, res
func (_m *ModuleService) Sync(ctx context.Context, res *domain.Resource) (*domain.Resource, error) {
	ret := _m.Called(ctx, res)

	var r0 *domain.Resource
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Resource) *domain.Resource); ok {
		r0 = rf(ctx, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Resource) error); ok {
		r1 = rf(ctx, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModuleService_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type ModuleService_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//  - ctx context.Context
//  - res *domain.Resource
func (_e *ModuleService_Expecter) Sync(ctx interface{}, res interface{}) *ModuleService_Sync_Call {
	return &ModuleService_Sync_Call{Call: _e.mock.On("Sync", ctx, res)}
}

func (_c *ModuleService_Sync_Call) Run(run func(ctx context.Context, res *domain.Resource)) *ModuleService_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Resource))
	})
	return _c
}

func (_c *ModuleService_Sync_Call) Return(_a0 *domain.Resource, _a1 error) *ModuleService_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
